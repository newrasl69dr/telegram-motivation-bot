import json
import datetime
import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

if not TOKEN or not USER_ID:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã BOT_TOKEN –∏ USER_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")

DATA_FILE = "data.json"

MOTIVATIONS = [
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω –≤ —ç—Ç–æ–º –ø—É—Ç–∏.",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è.",
    "–¢—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.",
    "–°—Ä—ã–≤ ‚Äî —ç—Ç–æ –Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, –∞ —É—Ä–æ–∫.",
    # ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
]

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return {"start_date": None, "days": []}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_day_number(start_date):
    today = datetime.date.today()
    delta = today - datetime.date.fromisoformat(start_date)
    return delta.days + 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    data = load_data()
    if not data["start_date"]:
        data["start_date"] = str(datetime.date.today())
        save_data(data)
        await update.message.reply_text("üìÖ –û—Ç—Å—á—ë—Ç –Ω–∞—á–∞—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.")
    else:
        await update.message.reply_text("üìÖ –û—Ç—Å—á—ë—Ç —É–∂–µ –Ω–∞—á–∞—Ç.")

async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    text = update.message.text
    today = str(datetime.date.today())
    data = load_data()
    data["days"].append({"date": today, "response": text})
    save_data(data)
    await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

async def send_motivation(context: ContextTypes.DEFAULT_TYPE):
    message = random.choice(MOTIVATIONS)
    await context.bot.send_message(chat_id=USER_ID, text=f"üí™ {message}")

async def send_stat_request(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data["start_date"]:
        return
    day_number = get_day_number(data["start_date"])
    text = f"""üìÖ –î–µ–Ω—å: {day_number}
üß† –°—Ä—ã–≤: (–¥–∞/–Ω–µ—Ç)
üõè –°–æ–Ω –¥–æ 23:30: (–¥–∞/–Ω–µ—Ç)"""
    await context.bot.send_message(chat_id=USER_ID, text=text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    data = load_data()
    total = len(data["days"])
    no_fails = sum(1 for d in data["days"] if "–Ω–µ—Ç" in d["response"].lower())
    week_data = [d for d in data["days"] if datetime.date.fromisoformat(d["date"]) >= datetime.date.today() - datetime.timedelta(days=7)]
    month_data = [d for d in data["days"] if datetime.date.fromisoformat(d["date"]).month == datetime.date.today().month]

    await update.message.reply_text(
        f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π: {total}\n"
        f"‚úÖ –ë–µ–∑ —Å—Ä—ã–≤–æ–≤: {no_fails}\n"
        f"üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: {len(week_data)}\n"
        f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {len(month_data)}"
    )

async def main():
    app = Application.builder().token(TOKEN).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Å–æ–±—ã—Ç–∏—è
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_motivation, "cron", hour=19, minute=0, args=[app])
    scheduler.add_job(send_stat_request, "cron", hour=23, minute=30, args=[app])
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
